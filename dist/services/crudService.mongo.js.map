{"version":3,"sources":["../../build/services/crudService.mongo.js"],"names":[],"mappingsfile":"crudService.mongo.js","sourcesContent":["// import {\n//     errorService,\n// } from '@/services'\n// import { BaseError } from '@/services/errors'\n// import { config } from '@/config'\n// import { Model, BaseModel, DocumentQuery } from '@/models'\n// export interface ICrudOption {\n//     filter?: any\n//     limit?: number\n//     offset?: number\n//     fields?: string[]\n//     populates?: any\n//     lean?: boolean\n// }\n// export interface ICrudExecOption {\n//     allowNull?: boolean\n// }\n// export class CrudService<T extends Model> {\n//     constructor(model: T) {\n//         this.model = model\n//     }\n//     model: T\n//     async exec(promise: Promise<any> | any, option: ICrudExecOption = { allowNull: true }) {\n//         try {\n//             let result;\n//             if (promise.hasOwnProperty(\"exec\")) {\n//                 result = await promise.exec();\n//             } else {\n//                 result = await promise;\n//             }\n//             if ((result === undefined || result === null) && !option.allowNull)\n//                 throw errorService.database.recordNotFound()\n//             return result;\n//         } catch (err) {\n//             if (err instanceof BaseError) throw err\n//             if (config.server.debug) {\n//                 if (err.errors && err.errors[0]) {\n//                     throw errorService.database.queryFail(err.errors[0].message)\n//                 } else {\n//                     throw errorService.database.queryFail(err.message)\n//                 }\n//             } else {\n//                 throw err\n//             }\n//         }\n//     }\n//     async getList(option: ICrudOption = {\n//         filter: {},\n//         limit: config.database.defaultPageSize,\n//         offset: 0\n//     }) {\n//         let query = this.model.find();\n//         query = this.applyQueryOptions(query, option)\n//         query.setOptions({\n//             toJson: { virtual: true }\n//         })\n//         const rows = await this.exec(query)\n//         const count = await query.count()\n//         return { count, rows }\n//     }\n//     async getItem(option?: ICrudOption) {\n//         let query = this.model.findOne()\n//         query = this.applyQueryOptions(query, option)\n//         return await this.exec(query, { allowNull: false })\n//     }\n//     async create(params: any, option?: ICrudOption) {\n//         const query = this.model.create(params)\n//         return await this.exec(query)\n//     }\n//     async update(params: any, option?: ICrudOption) {\n//         const query = this.model.findOneAndUpdate(option.filter, params, { new: true })\n//         return await this.exec(query)\n//     }\n//     async delete(option?: ICrudOption) {\n//         let query = this.model.findOne()\n//         query = this.applyQueryOptions(query, option)\n//         const item = await this.exec(query, { allowNull: false })\n//         return this.exec(item.remove())\n//     }\n//     async deleteAll(option?: ICrudOption) {\n//         let query = this.model.remove(option.filter)\n//         query = this.applyQueryOptions(query, option)\n//         return await this.exec(query)\n//     }\n//     applyQueryOptions(query: DocumentQuery, option: ICrudOption) {\n//         if (option.filter) query.where(option.filter)\n//         if (option.limit) query.limit(option.limit)\n//         if (option.offset) query.skip(option.offset)\n//         if (option.fields) query.select(option.fields)\n//         if (option.populates) {\n//             for (const populate of option.populates) {\n//                 query.populate(populate)\n//             }\n//         }\n//         if (option.lean) query.lean()\n//         return query\n//     }\n// }\n//# sourceMappingURL=crudService.mongo.js.map"]}