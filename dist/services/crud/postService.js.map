{"version":3,"sources":["../../../build/services/crud/postService.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","crudService_pg_1","require","tables_1","config_1","PostService","Post","params","option","exec","model","findById","filter","id","allowNull","item","keys","j","length","dataValues","undefined","created_at","updated_at","deleted_at","status","editor","editor_type","create","applyCreateOptions","createPost","updated_id","editor_role","update","FavoritePost","post_id","where","ProductPost","post","JSON","parse","stringify","object","findPostHistory","findOne","current_post","push","User","editor_user","Employee","editor_employee","console","log","history","limit","config","database","defaultPageSize","offset","scope","modelWithScope","findAndCountAll","applyFindOptions","CrudService"],"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","file":"postService.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crudService_pg_1 = require(\"../crudService.pg\");\nconst tables_1 = require(\"@/models/tables\");\nconst config_1 = require(\"@/config\");\nclass PostService extends crudService_pg_1.CrudService {\n    constructor() {\n        super(tables_1.Post);\n    }\n    update(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const item = yield this.exec(this.model.findById(option.filter.id), { allowNull: false });\n            //get data from params to item\n            var keys = Object.keys(params);\n            for (var j = 0; j < keys.length; j++) {\n                item.dataValues[keys[j]] = params[keys[j]];\n            }\n            item.dataValues.id = undefined;\n            item.dataValues.created_at = undefined;\n            item.dataValues.updated_at = undefined;\n            item.dataValues.deleted_at = undefined;\n            item.dataValues.status = undefined;\n            item.dataValues.editor = undefined;\n            item.dataValues.editor_type = undefined;\n            const createPost = yield this.exec(this.model.create(item.dataValues, this.applyCreateOptions(option)));\n            item.dataValues.id = option.filter.id;\n            params.updated_id = createPost.id;\n            var editor_type;\n            if (params.editor_role == 'ADMIN') {\n                params.editor_type = \"EMPLOYEE\";\n                editor_type = params.editor_type;\n            }\n            else {\n                params.editor_type = \"USER\";\n                editor_type = params.editor_type;\n            }\n            const updated_id = params.updated_id;\n            const editor = params.editor;\n            yield this.exec(item.update({ editor_type, updated_id, editor }));\n            yield this.exec(tables_1.FavoritePost.update({ post_id: createPost.id }, { where: { post_id: item.id } }));\n            yield this.exec(tables_1.ProductPost.update({ post_id: createPost.id }, { where: { post_id: item.id } }));\n            return createPost;\n        });\n    }\n    getPostWithHistory(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let item = yield this.exec(this.model.findById(option.filter.id), { allowNull: false });\n            var post = JSON.parse(JSON.stringify(item));\n            let object = [];\n            let findPostHistory;\n            try {\n                findPostHistory = yield this.exec(tables_1.Post.findOne({ where: { updated_id: item.id } }), { allowNull: false });\n            }\n            catch (e) {\n                return { current_post: post };\n            }\n            object.push(findPostHistory);\n            if (findPostHistory.editor_type == 'USER') {\n                var editor_user = yield this.exec(tables_1.User.findOne({ where: { id: findPostHistory.editor } }), { allowNull: false });\n            }\n            if (findPostHistory.editor_type == 'EMPLOYEE') {\n                var editor_employee = yield this.exec(tables_1.Employee.findOne({ where: { id: findPostHistory.editor } }), { allowNull: false });\n            }\n            while (true) {\n                try {\n                    findPostHistory = yield this.exec(tables_1.Post.findOne({ where: { updated_id: findPostHistory.id } }), { allowNull: false });\n                    object.push(findPostHistory);\n                    console.log(\"aaaaa \" + findPostHistory.updated_id);\n                }\n                catch (e) {\n                    break;\n                }\n            }\n            const current_post = { post, editor: editor_user || editor_employee };\n            return { current_post, history: object };\n        });\n    }\n    getList(option = {\n        limit: config_1.config.database.defaultPageSize,\n        offset: 0,\n        scope: ['defaultScope']\n    }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            option.filter['updated_id'] = null;\n            return yield this.exec(this.modelWithScope(option.scope)\n                .findAndCountAll(this.applyFindOptions(option)));\n        });\n    }\n}\nexports.PostService = PostService;\n//# sourceMappingURL=postService.js.map"]}