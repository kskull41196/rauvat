{"version":3,"sources":["../../../build/services/crud/productService.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","crudService_pg_1","require","services_1","models_1","models_2","const_1","config_1","const_2","ProductService","Product","params","option","limit","config","database","defaultPageSize","offset","scope","name","global_category_id","area_id","is_quick_post","trade_type","point","radius","query","where","updated_id","state","is_limit_duration","assign","type","Sequelize","and","fn","col","longitude","latitude","default","METER_TO_MILE","area_ids","parent_ids","exec","GlobalArea","findAndCountAll","parent_id","$in","attributes","global_areas","count","rows","map","area","push","id","global_area_id","filter","modelWithScope","applyFindOptions","is_buy","sequelize","transaction","t","create","product","GlobalCategory","findOne","global_category","update","amount_of_product","commit","rollback","model","findById","allowNull","item","keys","j","length","dataValues","undefined","created_at","updated_at","deleted_at","status","editor","editor_type","applyCreateOptions","createProduct","editor_role","User","user_id","itemUser","registrationToken","registation_id","message","action","FCM_ACTIONS","PRODUCT_VALID","PRODUCT_BANNED","PRODUCT_EXPIRED","PRODUCT_REVIEW","firebaseService","sendNotification","FavoriteProduct","product_id","ProductPost","BillItem","ProductGlobalAttribute","JSON","parse","stringify","object","findProductHistory","current_product","Employee","console","log","history","CrudService"],"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","file":"productService.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crudService_pg_1 = require(\"../crudService.pg\");\nconst services_1 = require(\"@/services\");\nconst models_1 = require(\"@/models\");\nconst models_2 = require(\"@/models\");\nconst const_1 = require(\"@/const\");\nconst config_1 = require(\"@/config\");\nconst const_2 = require(\"../../const\");\nclass ProductService extends crudService_pg_1.CrudService {\n    constructor() {\n        super(models_1.Product);\n    }\n    filter(params, option = {\n        limit: config_1.config.database.defaultPageSize,\n        offset: 0,\n        scope: ['defaultScope']\n    }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { name, global_category_id, area_id, is_quick_post, trade_type, point, radius } = params;\n            const query = {\n                where: {\n                    updated_id: null,\n                    state: 'VALID'\n                }\n            };\n            if (name) {\n                query.where.name = name;\n            }\n            if (global_category_id) {\n                query.where.global_category_id = global_category_id;\n            }\n            if (is_quick_post == true || is_quick_post == false) {\n                if (is_quick_post == true)\n                    query.where.is_limit_duration = false;\n                else if (is_quick_post == false)\n                    query.where.is_limit_duration = true;\n            }\n            if (trade_type) {\n                query.where = Object.assign(query.where, {\n                    type: trade_type\n                });\n            }\n            if (point && radius) {\n                query.where = models_2.Sequelize.and(models_2.Sequelize.where(models_2.Sequelize.fn('ST_DWithin', models_2.Sequelize.col('position'), models_2.Sequelize.fn('ST_SetSRID', models_2.Sequelize.fn('ST_MakePoint', point.longitude, point.latitude), 4326), radius * const_1.default.METER_TO_MILE), true), query.where);\n            }\n            if (!radius && area_id) {\n                const area_ids = [area_id];\n                let parent_ids = [area_id];\n                while (true) {\n                    const global_areas = yield this.exec(models_1.GlobalArea.findAndCountAll({\n                        where: {\n                            parent_id: {\n                                $in: parent_ids\n                            }\n                        },\n                        attributes: ['id']\n                    }));\n                    if (global_areas.count === 0)\n                        break;\n                    parent_ids = global_areas.rows.map((area) => {\n                        area_ids.push(area.id);\n                        return area.id;\n                    });\n                }\n                query.where.global_area_id = {\n                    $in: area_ids\n                };\n            }\n            option.filter = query.where;\n            return yield this.exec(this.modelWithScope(option.scope)\n                .findAndCountAll(this.applyFindOptions(option)));\n        });\n    }\n    postProduct(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { global_category_id, is_buy } = params;\n            if (is_buy)\n                params.type = 'BUY';\n            else\n                params.type = 'SELL';\n            params.state = 'REVIEW';\n            const t = yield models_2.sequelize.transaction();\n            try {\n                const product = yield this.exec(models_1.Product.create(params, {\n                    transaction: t\n                }));\n                const global_category = yield this.exec(models_1.GlobalCategory.findOne({\n                    where: {\n                        id: global_category_id\n                    },\n                    transaction: t\n                }));\n                yield this.exec(models_1.GlobalCategory.update({\n                    amount_of_product: global_category.amount_of_product + 1\n                }, {\n                    where: {\n                        id: global_category_id\n                    },\n                    transaction: t\n                }));\n                t.commit();\n                return product;\n            }\n            catch (e) {\n                t.rollback();\n                throw e;\n            }\n        });\n    }\n    postQuickProduct(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { global_category_id, is_buy } = params;\n            if (is_buy)\n                params.type = 'BUY';\n            else\n                params.type = 'SELL';\n            params.state = 'VALID';\n            const t = yield models_2.sequelize.transaction();\n            try {\n                const product = yield this.exec(models_1.Product.create(params, {\n                    transaction: t\n                }));\n                const global_category = yield this.exec(models_1.GlobalCategory.findOne({\n                    where: {\n                        id: global_category_id\n                    },\n                    transaction: t\n                }));\n                yield this.exec(models_1.GlobalCategory.update({\n                    amount_of_product: global_category.amount_of_product + 1\n                }, {\n                    where: {\n                        id: global_category_id\n                    },\n                    transaction: t\n                }));\n                t.commit();\n                return product;\n            }\n            catch (e) {\n                t.rollback();\n                throw e;\n            }\n        });\n    }\n    update(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const item = yield this.exec(this.model.findById(option.filter.id), { allowNull: false });\n            // get data from params to item\n            const keys = Object.keys(params);\n            for (let j = 0; j < keys.length; j++) {\n                item.dataValues[keys[j]] = params[keys[j]];\n            }\n            item.dataValues.id = undefined;\n            item.dataValues.created_at = undefined;\n            item.dataValues.updated_at = undefined;\n            item.dataValues.deleted_at = undefined;\n            item.dataValues.status = undefined;\n            item.dataValues.editor = undefined;\n            item.dataValues.editor_type = undefined;\n            const createProduct = yield this.exec(this.model.create(item.dataValues, this.applyCreateOptions(option)));\n            item.dataValues.id = option.filter.id;\n            params.updated_id = createProduct.id;\n            let editor_type;\n            if (params.editor_role == 'ADMIN') {\n                params.editor_type = \"EMPLOYEE\";\n                editor_type = params.editor_type;\n            }\n            else {\n                params.editor_type = \"USER\";\n                editor_type = params.editor_type;\n            }\n            const updated_id = params.updated_id;\n            const editor = params.editor;\n            const itemUser = yield this.exec(models_1.User.findOne({ where: { id: item.user_id } }), { allowNull: false });\n            const registrationToken = itemUser.registation_id;\n            const message = \"Sản Phẩm \" + item.name + \" Của Bạn Vừa Được Cập Nhật\";\n            let action;\n            if (createProduct.state == \"VALID\") {\n                action = const_2.FCM_ACTIONS.PRODUCT_VALID;\n            }\n            else if (createProduct.state == \"BANNED\") {\n                action = const_2.FCM_ACTIONS.PRODUCT_BANNED;\n            }\n            else if (createProduct.state == \"OUTDATED\") {\n                action = const_2.FCM_ACTIONS.PRODUCT_EXPIRED;\n            }\n            else if (createProduct.state == \"REVIEW\") {\n                action = const_2.FCM_ACTIONS.PRODUCT_REVIEW;\n            }\n            services_1.firebaseService.sendNotification(registrationToken, message, action);\n            yield this.exec(item.update({ editor_type, updated_id, editor }));\n            yield this.exec(models_1.FavoriteProduct.update({ product_id: createProduct.id }, { where: { product_id: item.id } }));\n            yield this.exec(models_1.ProductPost.update({ product_id: createProduct.id }, { where: { product_id: item.id } }));\n            yield this.exec(models_1.BillItem.update({ product_id: createProduct.id }, { where: { product_id: item.id } }));\n            yield this.exec(models_1.ProductGlobalAttribute.update({ product_id: createProduct.id }, { where: { product_id: item.id } }));\n            return createProduct;\n        });\n    }\n    getProductWithHistory(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const item = yield this.exec(this.model.findById(option.filter.id), { allowNull: false });\n            const product = JSON.parse(JSON.stringify(item));\n            const object = [];\n            let findProductHistory;\n            try {\n                findProductHistory = yield this.exec(models_1.Product.findOne({ where: { updated_id: item.id } }), { allowNull: false });\n            }\n            catch (e) {\n                return { current_product: product };\n            }\n            object.push(findProductHistory);\n            let editor;\n            if (findProductHistory.editor_type == 'USER') {\n                editor = yield this.exec(models_1.User.findOne({ where: { id: findProductHistory.editor } }), { allowNull: false });\n            }\n            else {\n                editor = yield this.exec(models_1.Employee.findOne({ where: { id: findProductHistory.editor } }), { allowNull: false });\n            }\n            while (true) {\n                try {\n                    findProductHistory = yield this.exec(models_1.Product.findOne({ where: { updated_id: findProductHistory.id } }), { allowNull: false });\n                    object.push(findProductHistory);\n                    console.log(\"aaaaa \" + findProductHistory.updated_id);\n                }\n                catch (e) {\n                    break;\n                }\n            }\n            const current_product = { product, editor };\n            return { current_product, history: object };\n        });\n    }\n    getList(option = {\n        limit: config_1.config.database.defaultPageSize,\n        offset: 0,\n        scope: ['defaultScope']\n    }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            option.filter['updated_id'] = null;\n            return yield this.exec(this.modelWithScope(option.scope)\n                .findAndCountAll(this.applyFindOptions(option)));\n        });\n    }\n}\nexports.ProductService = ProductService;\n//# sourceMappingURL=productService.js.map"]}