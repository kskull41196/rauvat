{"version":3,"sources":["../../../build/services/crud/relationshipHistoryService.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","crudService_pg_1","require","models_1","services_1","RelationshipHistoryService","RelationshipHistory","params","user_id","receiver_id","sequelize","transaction","exec","create","sender_id","action","relationship_history","Relationship","relationship_history_id","id","relationship","commit","console","log","rollback","findOne","where","include","association","errorService","database","recordNotFound","update","destroy","CrudService"],"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","file":"relationshipHistoryService.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crudService_pg_1 = require(\"../crudService.pg\");\nconst models_1 = require(\"@/models\");\nconst services_1 = require(\"@/services\");\nclass RelationshipHistoryService extends crudService_pg_1.CrudService {\n    constructor() {\n        super(models_1.RelationshipHistory);\n    }\n    friendRequest(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { user_id, receiver_id } = params;\n            const transaction = yield models_1.sequelize.transaction();\n            try {\n                let relationship_history = yield this.exec(models_1.RelationshipHistory.create({\n                    sender_id: user_id,\n                    receiver_id,\n                    action: 'PENDING'\n                }, {\n                    transaction\n                }));\n                let relationship = yield this.exec(models_1.Relationship.create({\n                    sender_id: user_id,\n                    receiver_id,\n                    relationship_history_id: relationship_history.id\n                }, {\n                    transaction\n                }));\n                // let following = await this.exec(Following.create({\n                //     user_id: user_id,\n                //     follower_id: receiver_id,\n                //     action: \"DEFAULT\",\n                // }, {\n                //         transaction\n                //     }))\n                transaction.commit();\n                return {\n                    relationship,\n                    relationship_history,\n                };\n            }\n            catch (e) {\n                console.log(e);\n                transaction.rollback();\n                throw e;\n            }\n        });\n    }\n    acceptFriendRequest(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { user_id, receiver_id } = params;\n            const transaction = yield models_1.sequelize.transaction();\n            try {\n                let relationship_history = yield this.exec(models_1.RelationshipHistory.findOne({\n                    where: {\n                        sender_id: user_id,\n                        receiver_id,\n                        action: 'PENDING'\n                    },\n                    include: [\n                        {\n                            association: 'relationship',\n                            where: {\n                                sender_id: user_id,\n                                receiver_id\n                            }\n                        }\n                    ],\n                    transaction\n                }));\n                if (!relationship_history)\n                    throw services_1.errorService.database.recordNotFound(\"Relationship not found\");\n                yield relationship_history.update({\n                    action: 'ACCEPTED'\n                });\n                transaction.commit();\n                return relationship_history;\n            }\n            catch (e) {\n                console.log(e);\n                transaction.rollback();\n                throw e;\n            }\n        });\n    }\n    unfriend(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { user_id, receiver_id } = params;\n            return yield this.exec(models_1.Relationship.destroy({\n                where: {\n                    sender_id: user_id,\n                    receiver_id\n                }\n            }));\n        });\n    }\n    block(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { user_id, receiver_id } = params;\n            const transaction = yield models_1.sequelize.transaction();\n            try {\n                let relationship_history = yield this.exec(models_1.RelationshipHistory.findOne({\n                    where: {\n                        sender_id: user_id,\n                        receiver_id,\n                        action: 'PENDING'\n                    },\n                    include: [\n                        {\n                            association: 'relationship',\n                            where: {\n                                sender_id: user_id,\n                                receiver_id\n                            }\n                        }\n                    ],\n                    transaction\n                }));\n                if (!relationship_history)\n                    throw services_1.errorService.database.recordNotFound(\"Relationship not found\");\n                yield relationship_history.update({\n                    action: 'BLOCKED'\n                });\n                transaction.commit();\n                return relationship_history;\n            }\n            catch (e) {\n                console.log(e);\n                transaction.rollback();\n                throw e;\n            }\n        });\n    }\n}\nexports.RelationshipHistoryService = RelationshipHistoryService;\n//# sourceMappingURL=relationshipHistoryService.js.map"]}