{"version":3,"sources":["../../../build/services/crud/globalPromotionService.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","crudService_pg_1","require","tables_1","moment","GlobalPromotionService","GlobalPromotion","from_date","start_date","time","Date","getTime","month","format","push","temp","set","get","date","to_date","from","startOf","to","endOf","params","option","type_statistic","months_detail","times","splitTimeMonth","start","end","count","where","created_at","$gte","$lte","itemPromotion","Employee","itemEmployee","User","itemUser","index","i","length","number_of_employees","number_of_users","number_of_promotions","employees","parseInt","users","promotions","undefined","days_detail","splitTimeDay","day","weeks_detail","splitTimeWeek","week","all","total_number_of_employees","total_number_of_users","total_number_of_promotions","statistic","CrudService"],"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","file":"globalPromotionService.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crudService_pg_1 = require(\"../crudService.pg\");\nconst tables_1 = require(\"@/models/tables\");\nconst moment = require(\"moment\");\nclass GlobalPromotionService extends crudService_pg_1.CrudService {\n    constructor() {\n        super(tables_1.GlobalPromotion);\n    }\n    splitTimeMonth(from_date, start_date) {\n        let time = [];\n        while (new Date(from_date).getTime() <= new Date(start_date).getTime()) {\n            let month = moment(from_date).format('YYYY-MM');\n            time.push(month);\n            let temp = moment(from_date);\n            temp.set('month', temp.get('month') + 1);\n            temp.set('date', 1);\n            temp.set('hour', 1);\n            from_date = temp.format();\n        }\n        return time;\n    }\n    splitTimeDay(from_date, start_date) {\n        let time = [];\n        while (new Date(from_date).getTime() <= new Date(start_date).getTime()) {\n            let date = moment(from_date).format('YYYY-MM-DD');\n            time.push(date);\n            let temp = moment(from_date);\n            temp.set('date', temp.get('date') + 1);\n            from_date = temp.format();\n        }\n        return time;\n    }\n    splitTimeWeek(from_date, to_date) {\n        let time = [];\n        while (new Date(from_date).getTime() <= new Date(to_date).getTime()) {\n            let date = moment(from_date).format('YYYY-MM-DD');\n            time.push(date);\n            let from = moment(from_date).startOf('week');\n            from.set('date', from.get('date') + 7);\n            from_date = from.format();\n            let to = moment(to_date).endOf('week');\n            to_date = to.format();\n        }\n        return time;\n    }\n    statisticGeneral(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { from_date, to_date, type_statistic, } = params;\n            let months_detail = [];\n            if (type_statistic == \"month\") {\n                let times = this.splitTimeMonth(from_date, to_date);\n                for (let time of times) {\n                    let start = moment(time);\n                    let end = moment(time);\n                    end.set('month', end.get('month') + 1);\n                    end.set('date', 0);\n                    end.set('hour', 23);\n                    end.set('minute', 59);\n                    end.set('second', 59);\n                    const itemPromotion = yield tables_1.GlobalPromotion.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            }\n                        }\n                    });\n                    const itemEmployee = yield tables_1.Employee.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            }\n                        }\n                    });\n                    const itemUser = yield tables_1.User.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            }\n                        }\n                    });\n                    var index = 0;\n                    for (var i = 0; i < months_detail.length; i++) {\n                        index++;\n                    }\n                    months_detail.push({\n                        index: index,\n                        month: time,\n                        number_of_employees: itemEmployee,\n                        number_of_users: itemUser,\n                        number_of_promotions: itemPromotion,\n                    });\n                    var employees = 0;\n                    for (var i = 0; i < months_detail.length; i++) {\n                        employees += parseInt(months_detail[i].number_of_employees);\n                    }\n                    var users = 0;\n                    for (var i = 0; i < months_detail.length; i++) {\n                        users += parseInt(months_detail[i].number_of_users);\n                    }\n                    var promotions = 0;\n                    for (var i = 0; i < months_detail.length; i++) {\n                        promotions += parseInt(months_detail[i].number_of_promotions);\n                    }\n                }\n            }\n            else\n                months_detail = undefined;\n            let days_detail = [];\n            if (type_statistic == \"day\") {\n                let times = this.splitTimeDay(from_date, to_date);\n                for (let time of times) {\n                    let start = moment(time);\n                    let end = moment(time);\n                    end.set('date', end.get('date') + 1);\n                    const itemPromotion = yield tables_1.GlobalPromotion.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            }\n                        }\n                    });\n                    const itemEmployee = yield tables_1.Employee.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            }\n                        }\n                    });\n                    const itemUser = yield tables_1.User.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            }\n                        }\n                    });\n                    var index = 0;\n                    for (var i = 0; i < days_detail.length; i++) {\n                        index++;\n                    }\n                    days_detail.push({\n                        index: index,\n                        day: time,\n                        number_of_employees: itemEmployee,\n                        number_of_users: itemUser,\n                        number_of_promotions: itemPromotion,\n                    });\n                    var employees = 0;\n                    for (var i = 0; i < days_detail.length; i++) {\n                        employees += parseInt(days_detail[i].number_of_employees);\n                    }\n                    var users = 0;\n                    for (var i = 0; i < days_detail.length; i++) {\n                        users += parseInt(days_detail[i].number_of_users);\n                    }\n                    var promotions = 0;\n                    for (var i = 0; i < days_detail.length; i++) {\n                        promotions += parseInt(days_detail[i].number_of_promotions);\n                    }\n                }\n            }\n            else\n                days_detail = undefined;\n            let weeks_detail = [];\n            if (type_statistic == \"week\") {\n                let times = this.splitTimeWeek(from_date, to_date);\n                for (let time of times) {\n                    let start = moment(time).startOf('week');\n                    let end = moment(time).endOf('week');\n                    const itemPromotion = yield tables_1.GlobalPromotion.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            }\n                        }\n                    });\n                    const itemEmployee = yield tables_1.Employee.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            }\n                        }\n                    });\n                    const itemUser = yield tables_1.User.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            }\n                        }\n                    });\n                    var index = 0;\n                    for (var i = 0; i < weeks_detail.length; i++) {\n                        index++;\n                    }\n                    weeks_detail.push({\n                        index: index,\n                        week: start.format('YYYY-MM-DD') + ' TO ' + end.format('YYYY-MM-DD'),\n                        number_of_employees: itemEmployee,\n                        number_of_users: itemUser,\n                        number_of_promotions: itemPromotion,\n                    });\n                    var employees = 0;\n                    for (var i = 0; i < weeks_detail.length; i++) {\n                        employees += parseInt(weeks_detail[i].number_of_employees);\n                    }\n                    var users = 0;\n                    for (var i = 0; i < weeks_detail.length; i++) {\n                        users += parseInt(weeks_detail[i].number_of_users);\n                    }\n                    var promotions = 0;\n                    for (var i = 0; i < weeks_detail.length; i++) {\n                        promotions += parseInt(weeks_detail[i].number_of_promotions);\n                    }\n                }\n            }\n            else\n                weeks_detail = undefined;\n            let [number_of_employees, number_of_users, number_of_promotions,] = yield Promise.all([\n                employees,\n                users,\n                promotions,\n            ]);\n            return {\n                total_number_of_employees: number_of_employees,\n                total_number_of_users: number_of_users,\n                total_number_of_promotions: number_of_promotions,\n                statistic: months_detail || days_detail || weeks_detail,\n            };\n        });\n    }\n}\nexports.GlobalPromotionService = GlobalPromotionService;\n//# sourceMappingURL=globalPromotionService.js.map"]}