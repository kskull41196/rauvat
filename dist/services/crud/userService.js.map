{"version":3,"sources":["../../../build/services/crud/userService.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","crudService_pg_1","require","services_1","models_1","crypto","CONVERT_MD5","ENCODING","base_1","moment","const_1","UserService","User","params","option","registrationToken","registation_id","message","exec","findOne","where","allowNull","item","user_id","id","title","content","data","Notification","create","applyCreateOptions","firebaseService","sendNotification","FCM_ACTIONS","SEND_NOTIFIATION","error","model","findById","filter","update","getItem","username","undefined","errorService","database","queryFail","password","md5Password","createHash","digest","EDIT_USER","updatedItem","phone","passwordNotMd5","count","resultUserName","resultPhone","lenghtPhone","length","lenghtUserName","lenghtPassword","resultOfRegister","createdUser","Wallet","createWallet","UserSetting","createUseSetting","duplicate","resultOfCheckUser","user_type","sequelize","transaction","t","HistoryMembership","type","history_membership","latest_updated_membership","format","Store","createStoreFail","working_time_from","working_time_to","description","address","name","fullname","avatar","createStore","include","association","user","commit","rollback","post_id","Comment","post","recordNotFound","Like","entity_type","entity_id","like","comment_id","comment","CrudService"],"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","file":"userService.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crudService_pg_1 = require(\"../crudService.pg\");\nconst services_1 = require(\"@/services\");\nconst models_1 = require(\"@/models\");\nconst crypto = require(\"crypto\");\nconst CONVERT_MD5 = 'md5';\nconst ENCODING = 'hex';\nconst base_1 = require(\"@/models/base\");\nconst moment = require(\"moment\");\nconst const_1 = require(\"../../const\");\nclass UserService extends crudService_pg_1.CrudService {\n    constructor() {\n        super(models_1.User);\n    }\n    sendNotification(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var registrationToken = params.registation_id;\n            var message = params.message;\n            const item = yield this.exec(models_1.User.findOne({ where: { registation_id: registrationToken } }), { allowNull: false });\n            const user_id = item.id;\n            params.title = params.message;\n            const title = params.title;\n            params.content = params.message;\n            const content = params.title;\n            const data = { \"message\": params.message };\n            yield this.exec(models_1.Notification.create({ user_id, title, content, data }, this.applyCreateOptions(option)));\n            try {\n                services_1.firebaseService.sendNotification(registrationToken, message, const_1.FCM_ACTIONS.SEND_NOTIFIATION);\n                return { registrationToken, message };\n            }\n            catch (error) {\n                return { registrationToken, error };\n            }\n        });\n    }\n    updateRegistrationId(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const item = yield this.exec(this.model.findById(option.filter.id), { allowNull: false });\n            const registation_id = params.registation_id;\n            yield this.exec(item.update({ registation_id }));\n            return yield this.getItem(option);\n        });\n    }\n    update(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const item = yield this.exec(this.model.findById(option.filter.id), { allowNull: false });\n            if (params.username != item.username && params.username != undefined) {\n                throw services_1.errorService.database.queryFail(\"Không được thay đổi Username\");\n            }\n            else {\n                if (params.password != undefined) {\n                    var md5Password = crypto.createHash(CONVERT_MD5).update(params.password).digest(ENCODING);\n                    params.password = md5Password;\n                }\n                const registrationToken = item.registation_id;\n                var message = \"Cập Nhật Thông Tin Tài Khoản \" + item.username + \" Thành công\";\n                services_1.firebaseService.sendNotification(registrationToken, message, const_1.FCM_ACTIONS.EDIT_USER);\n                let updatedItem = yield this.exec(item.update(params));\n                updatedItem.password = undefined;\n                return updatedItem;\n            }\n        });\n    }\n    getPassword(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const item = yield this.exec(this.model.findOne({ where: { phone: params.phone } }), { allowNull: false });\n            yield this.exec(item.update({ password: params.password }));\n            const message = \"Đổi mật khẩu thành công\";\n            return message;\n        });\n    }\n    create(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var passwordNotMd5 = params.password;\n            var md5Password = crypto.createHash(CONVERT_MD5).update(params.password).digest(ENCODING);\n            params.password = md5Password;\n            var username = params.username;\n            var phone = params.phone;\n            const resultUserName = yield this.model.count({\n                where: {\n                    username\n                }\n            });\n            const resultPhone = yield this.model.count({\n                where: {\n                    phone\n                }\n            });\n            var lenghtPhone = phone.length;\n            var lenghtUserName = username.length;\n            var lenghtPassword = passwordNotMd5.length;\n            if (lenghtUserName <= 3) {\n                const resultOfRegister = \"Tài khoản phải có từ 4 ký tự trở lên\";\n                return resultOfRegister;\n            }\n            else if (lenghtPassword <= 5) {\n                const resultOfRegister = \"Mật khẩu phải có từ 6 ký tự trở lên\";\n                return resultOfRegister;\n            }\n            else if (lenghtPhone > 15 || lenghtPhone < 9) {\n                const resultOfRegister = \"Số điện thoại sai quy định\";\n                return resultOfRegister;\n            }\n            else if (resultUserName == 1) {\n                throw services_1.errorService.database.queryFail(username + \" đã tồn tại, vui lòng chọn username khác\");\n            }\n            else if (resultPhone == 1) {\n                throw services_1.errorService.database.queryFail(phone + \" đã tồn tại, vui lòng chọn số điện thoại khác khác\");\n            }\n            else {\n                const createdUser = yield this.exec(this.model.create(params, this.applyCreateOptions(option)));\n                //tạo ví cho username vừa tạo ở trên với amount_of_purchase mặc định = 0       \n                const createWallet = yield this.exec(models_1.Wallet.create({ user_id: createdUser.id }, this.applyCreateOptions(option)));\n                const createUseSetting = yield this.exec(models_1.UserSetting.create({ user_id: createdUser.id }, this.applyCreateOptions(option)));\n                return { createdUser, createWallet, createUseSetting };\n            }\n        });\n    }\n    checkLogin(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.model.count({\n                where: {\n                    username: params.username,\n                    password: params.password\n                }\n            });\n            if (result == 1) {\n                const item = yield this.exec(this.model.findOne({ where: { username: params.username } }), { allowNull: false });\n                item.password = undefined;\n                return item;\n            }\n            else {\n                throw services_1.errorService.database.queryFail(\"Vui lòng kiểm tra lại Tài khoản hoặc mật khẩu\");\n            }\n        });\n    }\n    checkUsername(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.model.count({\n                where: { username: params.username }\n            });\n            if (result == 1) {\n                const duplicate = true;\n                const resultOfCheckUser = params.username + \" đã tồn tại, vui lòng chọn username khác\";\n                return { duplicate, resultOfCheckUser };\n            }\n            else {\n                const resultOfCheckUser = \"Có thể sử dụng \" + params.username;\n                return { message: resultOfCheckUser };\n            }\n        });\n    }\n    upgrade(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { user_id, user_type } = params;\n            const t = yield base_1.sequelize.transaction();\n            try {\n                let history_membership = yield this.exec(models_1.HistoryMembership.create({\n                    user_id: user_id,\n                    type: 'UPGRADE'\n                }, {\n                    transaction: t\n                }));\n                yield this.exec(models_1.User.update({\n                    user_type: user_type,\n                    latest_updated_membership: moment().format()\n                }, {\n                    where: {\n                        id: user_id\n                    },\n                    transaction: t\n                }));\n                const result = yield models_1.Store.count({\n                    where: {\n                        user_id,\n                    }\n                });\n                if (result == 1) {\n                    var createStoreFail = \"Cửa Hàng Đã Được Tạo Rồi\";\n                }\n                else {\n                    const item = yield this.exec(models_1.User.findOne({ where: { id: user_id } }), { allowNull: false });\n                    var createStore = yield this.exec(models_1.Store.create({\n                        user_id: user_id,\n                        working_time_from: 0,\n                        working_time_to: 0,\n                        phone: item.phone,\n                        description: \"\",\n                        address: item.address,\n                        name: \"Cửa Hàng Của \" + item.fullname,\n                        avatar: item.avatar,\n                    }, this.applyCreateOptions(option)));\n                }\n                let user = yield this.exec(models_1.User.findOne({\n                    where: {\n                        id: user_id\n                    },\n                    include: [\n                        {\n                            association: 'history_memberships'\n                        }\n                    ],\n                    transaction: t\n                }));\n                t.commit();\n                return { user, message: createStore || createStoreFail };\n            }\n            catch (e) {\n                t.rollback();\n                throw e;\n            }\n        });\n    }\n    downgrade(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { user_id } = params;\n            const t = yield base_1.sequelize.transaction();\n            try {\n                let history_membership = yield this.exec(models_1.HistoryMembership.create({\n                    user_id: user_id,\n                    type: 'DOWNGRADE'\n                }, {\n                    transaction: t\n                }));\n                yield this.exec(models_1.User.update({\n                    user_type: 'NORMAL'\n                }, {\n                    where: {\n                        id: user_id\n                    },\n                    transaction: t\n                }));\n                let user = yield this.exec(models_1.User.findOne({\n                    where: {\n                        id: user_id\n                    },\n                    include: [\n                        {\n                            association: 'history_memberships'\n                        }\n                    ],\n                    transaction: t\n                }));\n                t.commit();\n                return user;\n            }\n            catch (e) {\n                t.rollback();\n                throw e;\n            }\n        });\n    }\n    likePost(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { post_id, user_id } = params;\n            const t = yield base_1.sequelize.transaction();\n            try {\n                let post = yield this.exec(models_1.Comment.findOne({\n                    where: {\n                        id: post_id\n                    }\n                }));\n                if (!post)\n                    throw services_1.errorService.database.recordNotFound(\"Post not found\");\n                let like = yield this.exec(models_1.Like.findOne({\n                    where: {\n                        user_id,\n                        entity_type: 'POST',\n                        entity_id: post_id\n                    },\n                    transaction: t\n                }));\n                if (!like) {\n                    like = yield this.exec(models_1.Like.create({\n                        user_id,\n                        entity_type: 'POST',\n                        entity_id: post_id\n                    }, {\n                        transaction: t\n                    }));\n                }\n                t.commit();\n                return like;\n            }\n            catch (e) {\n                t.rollback();\n                throw e;\n            }\n        });\n    }\n    likeComment(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { comment_id, user_id } = params;\n            const t = yield base_1.sequelize.transaction();\n            try {\n                let comment = yield this.exec(models_1.Comment.findOne({\n                    where: {\n                        id: comment_id\n                    }\n                }));\n                if (!comment)\n                    throw services_1.errorService.database.recordNotFound(\"Comment not found\");\n                let like = yield this.exec(models_1.Like.findOne({\n                    where: {\n                        user_id,\n                        entity_type: 'CMT',\n                        entity_id: comment_id\n                    },\n                    transaction: t\n                }));\n                if (!like) {\n                    like = yield this.exec(models_1.Like.create({\n                        user_id,\n                        entity_type: 'CMT',\n                        entity_id: comment_id\n                    }, {\n                        transaction: t\n                    }));\n                }\n                t.commit();\n                return like;\n            }\n            catch (e) {\n                t.rollback();\n                throw e;\n            }\n        });\n    }\n    commentOnPost(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { content, user_id, post_id } = params;\n            const t = yield base_1.sequelize.transaction();\n            try {\n                let comment = yield this.exec(models_1.Comment.create({\n                    user_id,\n                    entity_type: 'POST',\n                    entity_id: post_id,\n                    content\n                }, {\n                    transaction: t\n                }));\n                t.commit();\n                return {\n                    comment\n                };\n            }\n            catch (e) {\n                t.rollback();\n                throw e;\n            }\n        });\n    }\n}\nexports.UserService = UserService;\n//# sourceMappingURL=userService.js.map"]}