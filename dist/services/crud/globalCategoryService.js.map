{"version":3,"sources":["../../../build/services/crud/globalCategoryService.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","crudService_pg_1","require","models_1","base_1","GlobalCategoryService","GlobalCategory","params","category_id","sequelize","transaction","t","exec","GlobalAttribute","create","attribute","GlobalCategoryAndAttribute","global_category_id","global_attribute_id","id","category_attributes","commit","rollback","attribute_id","destroy","where","CrudService"],"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","file":"globalCategoryService.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crudService_pg_1 = require(\"../crudService.pg\");\nconst models_1 = require(\"@/models\");\nconst base_1 = require(\"@/models/base\");\nclass GlobalCategoryService extends crudService_pg_1.CrudService {\n    constructor() {\n        super(models_1.GlobalCategory);\n    }\n    addAttributes(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { category_id } = params;\n            const t = yield base_1.sequelize.transaction();\n            try {\n                let attribute = yield this.exec(models_1.GlobalAttribute.create(params, {\n                    transaction: t\n                }));\n                // let products = await this.exec(Product.findAll({\n                //     where: {\n                //         global_category_id: category_id\n                //     },\n                //     attributes: ['id'],\n                //     transaction: t\n                // }))\n                // let bulk_products = products.map((product: any) => {\n                //     return {\n                //         product_id: product.id,\n                //         global_attribute_id: attribute.id\n                //     }\n                // });\n                // let product_attributes = await this.exec(ProductGlobalAttribute.bulkCreate(bulk_products, {\n                //     transaction: t\n                // }));\n                let category_attributes = yield this.exec(models_1.GlobalCategoryAndAttribute.create({\n                    global_category_id: category_id,\n                    global_attribute_id: attribute.id\n                }, {\n                    transaction: t\n                }));\n                t.commit();\n                return {\n                    attribute,\n                    category_attributes\n                };\n            }\n            catch (e) {\n                t.rollback();\n                throw e;\n            }\n        });\n    }\n    deleteAttributes(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { category_id, attribute_id } = params;\n            // let products = await Product.findAll({\n            //     where: {\n            //         global_category_id: category_id\n            //     },\n            //     attributes: ['id']\n            // });\n            // let product_ids = products.map((product: any) => {\n            //     return product.id;\n            // });\n            return yield this.exec(models_1.GlobalCategoryAndAttribute.destroy({\n                where: {\n                    global_category_id: category_id,\n                    global_attribute_id: attribute_id\n                }\n            }));\n        });\n    }\n}\nexports.GlobalCategoryService = GlobalCategoryService;\n//# sourceMappingURL=globalCategoryService.js.map"]}