{"version":3,"sources":["../../../build/services/crud/storeService.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","crudService_pg_1","require","tables_1","moment","StoreService","Store","from_date","start_date","time","Date","getTime","month","format","push","temp","set","get","date","to_date","from","startOf","to","endOf","params","option","type_statistic","months_detail","times","splitTimeMonth","start","end","count","where","created_at","$gte","$lte","itemStore","Product","updated_id","itemProduct","Bill","itemBill","index","i","length","number_of_stores","number_of_products","number_of_bills","stores","parseInt","products","bills","undefined","days_detail","splitTimeDay","day","weeks_detail","splitTimeWeek","week","all","total_number_of_stores","total_number_of_products","total_number_of_bills","statistic","CrudService"],"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","file":"storeService.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crudService_pg_1 = require(\"../crudService.pg\");\nconst tables_1 = require(\"@/models/tables\");\nconst moment = require(\"moment\");\nclass StoreService extends crudService_pg_1.CrudService {\n    constructor() {\n        super(tables_1.Store);\n    }\n    splitTimeMonth(from_date, start_date) {\n        let time = [];\n        while (new Date(from_date).getTime() <= new Date(start_date).getTime()) {\n            let month = moment(from_date).format('YYYY-MM');\n            time.push(month);\n            let temp = moment(from_date);\n            temp.set('month', temp.get('month') + 1);\n            temp.set('date', 1);\n            temp.set('hour', 1);\n            from_date = temp.format();\n        }\n        return time;\n    }\n    splitTimeDay(from_date, start_date) {\n        let time = [];\n        while (new Date(from_date).getTime() <= new Date(start_date).getTime()) {\n            let date = moment(from_date).format('YYYY-MM-DD');\n            time.push(date);\n            let temp = moment(from_date);\n            temp.set('date', temp.get('date') + 1);\n            from_date = temp.format();\n        }\n        return time;\n    }\n    splitTimeWeek(from_date, to_date) {\n        let time = [];\n        while (new Date(from_date).getTime() <= new Date(to_date).getTime()) {\n            let date = moment(from_date).format('YYYY-MM-DD');\n            time.push(date);\n            let from = moment(from_date).startOf('week');\n            from.set('date', from.get('date') + 7);\n            from_date = from.format();\n            let to = moment(to_date).endOf('week');\n            to_date = to.format();\n        }\n        return time;\n    }\n    statisticTrading(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { from_date, to_date, type_statistic, } = params;\n            let months_detail = [];\n            if (type_statistic == \"month\") {\n                let times = this.splitTimeMonth(from_date, to_date);\n                for (let time of times) {\n                    let start = moment(time);\n                    let end = moment(time);\n                    end.set('month', end.get('month') + 1);\n                    end.set('date', 0);\n                    end.set('hour', 23);\n                    end.set('minute', 59);\n                    end.set('second', 59);\n                    const itemStore = yield tables_1.Store.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            }\n                        }\n                    });\n                    const itemProduct = yield tables_1.Product.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            },\n                            updated_id: null\n                        }\n                    });\n                    const itemBill = yield tables_1.Bill.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            },\n                            updated_id: null\n                        }\n                    });\n                    var index = 0;\n                    for (var i = 0; i < months_detail.length; i++) {\n                        index++;\n                    }\n                    months_detail.push({\n                        index: index,\n                        month: time,\n                        number_of_stores: itemStore,\n                        number_of_products: itemProduct,\n                        number_of_bills: itemBill,\n                    });\n                    var stores = 0;\n                    for (var i = 0; i < months_detail.length; i++) {\n                        stores += parseInt(months_detail[i].number_of_stores);\n                    }\n                    var products = 0;\n                    for (var i = 0; i < months_detail.length; i++) {\n                        products += parseInt(months_detail[i].number_of_products);\n                    }\n                    var bills = 0;\n                    for (var i = 0; i < months_detail.length; i++) {\n                        bills += parseInt(months_detail[i].number_of_bills);\n                    }\n                }\n            }\n            else\n                months_detail = undefined;\n            let days_detail = [];\n            if (type_statistic == \"day\") {\n                let times = this.splitTimeDay(from_date, to_date);\n                for (let time of times) {\n                    let start = moment(time);\n                    let end = moment(time);\n                    end.set('date', end.get('date') + 1);\n                    const itemStore = yield tables_1.Store.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            }\n                        }\n                    });\n                    const itemProduct = yield tables_1.Product.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            },\n                            updated_id: null\n                        }\n                    });\n                    const itemBill = yield tables_1.Bill.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            },\n                            updated_id: null\n                        }\n                    });\n                    var index = 0;\n                    for (var i = 0; i < days_detail.length; i++) {\n                        index++;\n                    }\n                    days_detail.push({\n                        index: index,\n                        day: time,\n                        number_of_stores: itemStore,\n                        number_of_products: itemProduct,\n                        number_of_bills: itemBill,\n                    });\n                    var stores = 0;\n                    for (var i = 0; i < days_detail.length; i++) {\n                        stores += parseInt(days_detail[i].number_of_stores);\n                    }\n                    var products = 0;\n                    for (var i = 0; i < days_detail.length; i++) {\n                        products += parseInt(days_detail[i].number_of_products);\n                    }\n                    var bills = 0;\n                    for (var i = 0; i < days_detail.length; i++) {\n                        bills += parseInt(days_detail[i].number_of_bills);\n                    }\n                }\n            }\n            else\n                days_detail = undefined;\n            let weeks_detail = [];\n            if (type_statistic == \"week\") {\n                let times = this.splitTimeWeek(from_date, to_date);\n                for (let time of times) {\n                    let start = moment(time).startOf('week');\n                    let end = moment(time).endOf('week');\n                    const itemStore = yield tables_1.Store.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            }\n                        }\n                    });\n                    const itemProduct = yield tables_1.Product.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            },\n                            updated_id: null\n                        }\n                    });\n                    const itemBill = yield tables_1.Bill.count({\n                        where: {\n                            created_at: {\n                                $gte: start.format(),\n                                $lte: end.format()\n                            },\n                            updated_id: null\n                        }\n                    });\n                    var index = 0;\n                    for (var i = 0; i < weeks_detail.length; i++) {\n                        index++;\n                    }\n                    weeks_detail.push({\n                        index: index,\n                        week: start.format('YYYY-MM-DD') + ' TO ' + end.format('YYYY-MM-DD'),\n                        number_of_stores: itemStore,\n                        number_of_products: itemProduct,\n                        number_of_bills: itemBill,\n                    });\n                    var stores = 0;\n                    for (var i = 0; i < weeks_detail.length; i++) {\n                        stores += parseInt(weeks_detail[i].number_of_stores);\n                    }\n                    var products = 0;\n                    for (var i = 0; i < weeks_detail.length; i++) {\n                        products += parseInt(weeks_detail[i].number_of_products);\n                    }\n                    var bills = 0;\n                    for (var i = 0; i < weeks_detail.length; i++) {\n                        bills += parseInt(weeks_detail[i].number_of_bills);\n                    }\n                }\n            }\n            else\n                weeks_detail = undefined;\n            let [number_of_stores, number_of_products, number_of_bills,] = yield Promise.all([\n                stores,\n                products,\n                bills,\n            ]);\n            return {\n                total_number_of_stores: number_of_stores,\n                total_number_of_products: number_of_products,\n                total_number_of_bills: number_of_bills,\n                statistic: months_detail || days_detail || weeks_detail,\n            };\n        });\n    }\n}\nexports.StoreService = StoreService;\n//# sourceMappingURL=storeService.js.map"]}