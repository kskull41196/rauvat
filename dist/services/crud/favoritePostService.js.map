{"version":3,"sources":["../../../build/services/crud/favoritePostService.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","crudService_pg_1","require","tables_1","services_1","FavoritePostService","FavoritePost","params","option","model","count","where","user_id","post_id","resultFavoritePost","errorService","database","queryFail","exec","create","applyCreateOptions","findOne","allowNull","item","destroy","CrudService"],"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","file":"favoritePostService.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crudService_pg_1 = require(\"../crudService.pg\");\nconst tables_1 = require(\"@/models/tables\");\nconst services_1 = require(\"@/services\");\nclass FavoritePostService extends crudService_pg_1.CrudService {\n    constructor() {\n        super(tables_1.FavoritePost);\n    }\n    addFavoritePost(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const resultFavoritePost = yield this.model.count({\n                where: {\n                    user_id: params.user_id,\n                    post_id: params.post_id\n                }\n            });\n            if (resultFavoritePost == 1) {\n                throw services_1.errorService.database.queryFail(\"Người dùng đã yêu thích bài viết này\");\n            }\n            else {\n                return yield this.exec(this.model.create(params, this.applyCreateOptions(option)));\n            }\n        });\n    }\n    removeFavoritePost(params, option) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const resultFavoritePost = yield this.model.count({\n                where: {\n                    user_id: params.user_id,\n                    post_id: params.post_id\n                }\n            });\n            if (resultFavoritePost == 0) {\n                throw services_1.errorService.database.queryFail(\"Người dùng chưa yêu thích bài viết này\");\n            }\n            else {\n                const item = yield this.exec(this.model.findOne({ where: { user_id: params.user_id, post_id: params.post_id } }), { allowNull: false });\n                return yield this.exec(item.destroy());\n            }\n        });\n    }\n}\nexports.FavoritePostService = FavoritePostService;\n//# sourceMappingURL=favoritePostService.js.map"]}