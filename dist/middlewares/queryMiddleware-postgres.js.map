{"version":3,"sources":["../../build/middlewares/queryMiddleware-postgres.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","base_1","require","config_1","_","QueryMiddleware","req","res","filter","_parseFilter","order","_parseOrder","page","parseInt","query","limit","config","database","defaultPageSize","offset","fields","_parseFields","attributes","union","queryInfo","merge","JSON","parse","ignore","undefined","_parseAttribute","err","attrs","includes","isGetAll","isSetParanoid","where","forEach","f","push","Array","isArray","name","bind","include","_parseInclude","distinct","paranoid","length","associates","i","associate","assign","association","BaseMiddleware"],"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","file":"queryMiddleware-postgres.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = require(\"./base\");\nconst config_1 = require(\"@/config\");\nconst _ = require(\"lodash\");\nclass QueryMiddleware extends base_1.BaseMiddleware {\n    use(req, res, next) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const filter = this._parseFilter(req);\n            const order = this._parseOrder(req);\n            const page = parseInt(req.query['page'] || 1);\n            const limit = parseInt(req.query['limit'] || config_1.config.database.defaultPageSize);\n            const offset = parseInt(req.query['offset']) || (page - 1) * limit;\n            const fields = this._parseFields(req);\n            if (fields.attributes) {\n                fields.attributes = _.union(['id', 'updated_at'], fields.attributes);\n            }\n            req.queryInfo = _.merge({\n                filter,\n                limit,\n                offset,\n                order\n            }, fields);\n            next();\n        });\n    }\n    /**\n     * Filter param only accept <and> query. <or> will be supported later\n     * Format: [[key, operator, value], [key, operator, value]]\n     */\n    _parseFilter(req) {\n        let filter = req.query['filter'];\n        try {\n            filter = JSON.parse(filter);\n        }\n        catch (ignore) {\n            filter = undefined;\n        }\n        return filter || {};\n    }\n    /**\n     * Format: [[key, order], [key, order]]\n     */\n    _parseOrder(req) {\n        let order = req.query['order'];\n        try {\n            order = JSON.parse(order);\n        }\n        catch (ignore) {\n            order = undefined;\n        }\n        return order || [\n            ['updated_at', 'desc']\n        ];\n    }\n    _parseFields(req) {\n        let fields = req.query['fields'];\n        try {\n            fields = JSON.parse(fields);\n        }\n        catch (ignore) {\n            fields = [];\n        }\n        try {\n            return this._parseAttribute(fields);\n        }\n        catch (err) {\n            return null;\n        }\n    }\n    _parseAttribute(attrs) {\n        let attributes = [];\n        let includes = [];\n        let isGetAll = false;\n        let isSetParanoid = false;\n        let where = undefined;\n        _.forEach(attrs, function (f) {\n            if (typeof f === \"string\") {\n                switch (f) {\n                    case '$all':\n                        isGetAll = true;\n                        break;\n                    case '$paranoid':\n                        isSetParanoid = true;\n                        break;\n                    default:\n                        attributes.push(f);\n                }\n            }\n            else if (typeof f === \"object\" && !Array.isArray(f)) {\n                _.forEach(f, ((value, name) => {\n                    switch (name) {\n                        case '$filter':\n                            where = _.merge({}, where, value);\n                            break;\n                        default:\n                            includes.push({\n                                [name]: value\n                            });\n                    }\n                }).bind(this));\n            }\n        });\n        let include = this._parseInclude(includes);\n        const result = {\n            include: include,\n            distinct: include ? true : false\n        };\n        if (where)\n            result.where = where;\n        if (!isGetAll) {\n            result.attributes = attributes;\n        }\n        if (isSetParanoid) {\n            result.paranoid = false;\n        }\n        return result;\n    }\n    _parseInclude(includes) {\n        if (includes.length === 0)\n            return includes;\n        let associates = [];\n        _.forEach(includes, ((i) => {\n            _.forEach(i, ((attrs, name) => {\n                let associate = Object.assign({\n                    association: name\n                }, this._parseAttribute(attrs));\n                associates.push(associate);\n            }).bind(this));\n        }).bind(this));\n        return associates;\n    }\n}\nexports.QueryMiddleware = QueryMiddleware;\n//# sourceMappingURL=queryMiddleware-postgres.js.map"]}